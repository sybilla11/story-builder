{"version":3,"sources":["component/Viewport/Viewport.module.css","component/Viewport/Viewport.js","container/Storybuilder.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Viewport","props","className","styles","Frame","Main","TophrLine","align","Title","title","toUpperCase","isImage","FlexBox","Body","dangerouslySetInnerHTML","__html","body","StoryImage","src","process","img","alt","Body2","bottomDiv","buttonLeft","onClick","buttonOnclick","buttonLeftIndx","buttonLeftTitle","MiddleDiv","buttonRight","buttonRightIndx","buttonRightTitle","rightDiv","Linkindex","linkindex","rightBottomDiv","StoryBuilder","state","loaded","isFirst","isEmpty","items","item","error","buttonOnclickHandler","indx","setState","axios","get","then","response","console","log","data","length","isLoaded","frames","catch","this","message","loadingFrame","loading","styleMain","backgroundColor","colors","bg","textColors","text","style","undefined","buttons","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dfa07545.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Frame\":\"Viewport_Frame__3dJeM\",\"loadingFrame\":\"Viewport_loadingFrame__3AFE0\",\"loading\":\"Viewport_loading__1ADhj\",\"Main\":\"Viewport_Main__2UIfr\",\"TophrLine\":\"Viewport_TophrLine__3M58P\",\"Title\":\"Viewport_Title__3MR0k\",\"FlexBox\":\"Viewport_FlexBox__3sEyT\",\"Body\":\"Viewport_Body__2pRaJ\",\"Body2\":\"Viewport_Body2__vMLqC\",\"StoryImage\":\"Viewport_StoryImage__3Q8IG\",\"bottomDiv\":\"Viewport_bottomDiv__1Zl_x\",\"MiddleDiv\":\"Viewport_MiddleDiv__2RWfc\",\"buttonLeft\":\"Viewport_buttonLeft__P_6Zo\",\"buttonRight\":\"Viewport_buttonRight__2sYAy\",\"rightDiv\":\"Viewport_rightDiv__1o_x7\",\"Linkindex\":\"Viewport_Linkindex__2M0KU\",\"rightBottomDiv\":\"Viewport_rightBottomDiv__3aF3y\"};","import React from \"react\";\nimport styles from \"./Viewport.module.css\";\n\nconst Viewport = (props) => {\n  return (\n    <div className={styles.Frame}>\n      <div className={styles.Main}>\n        <hr className={styles.TophrLine} align=\"left\" />\n        <div className={styles.Title}>{props.title.toUpperCase()}</div>\n\n        {props.isImage ? (\n          <div className={styles.FlexBox}>\n            <div\n              className={styles.Body}\n              dangerouslySetInnerHTML={{ __html: props.body }}\n            ></div>\n            <img className={styles.StoryImage} src={process.env.PUBLIC_URL+props.img} alt=\"My story\" />\n          </div>\n        ) : (\n          <div className={styles.FlexBox}>\n            <div\n              className={styles.Body2}\n              dangerouslySetInnerHTML={{ __html: props.body }}\n            ></div>\n          </div>\n        )}\n\n        <div className={styles.bottomDiv}>\n          {props.buttonLeft ? (\n            <div\n              className={styles.buttonLeft}\n              onClick={() => props.buttonOnclick(props.buttonLeftIndx)}\n            >\n              {props.buttonLeftTitle}\n            </div>\n          ) : null}\n          <div className={styles.MiddleDiv}></div>\n          {props.buttonRight ? (\n            <div\n              className={styles.buttonRight}\n              onClick={() => props.buttonOnclick(props.buttonRightIndx)}\n            >\n              {props.buttonRightTitle}\n            </div>\n          ) : null}\n        </div>\n      </div>\n      <div className={styles.rightDiv}>\n        <div className={styles.Linkindex}> {props.linkindex}</div>\n        <div className={styles.rightBottomDiv}></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Viewport;\n","import React, { Component } from \"react\";\nimport Viewport from \"../component/Viewport/Viewport\";\nimport styles from \"../component/Viewport/Viewport.module.css\";\nimport axios from 'axios'\n\nclass StoryBuilder extends Component {\n  state = {\n    loaded: false,\n    isFirst: true,\n    isEmpty: false,\n    items: [],\n    item: null,\n    error: null,\n    linkindex: 0,\n  };\n  buttonOnclickHandler = (indx) => {\n    let item = this.state.items[indx];\n    this.setState({\n      linkindex: indx + 1,\n      item: item,\n    });\n  };\n  componentDidMount() {\n    axios\n      .get(\"data/story.json\")\n      .then((response) => {\n        console.log(response.data);\n        if(response.data.length ===0){\n          this.setState({\n            isLoaded: true,\n            isEmpty: true,\n          });\n        }else{\n          this.setState({\n            isLoaded: true,\n            items: response.data.frames,\n            linkindex: 1,\n            item: response.data.frames[0],\n          });\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n          this.setState({\n            isLoaded: true,\n            error:'error'\n          });\n      });\n  }\n    // fetch(\"data/empty.json\")\n    // //fetch(\"data/story.json\")\n    //   .then((res) => {\n    //   console.log('res', res)\n    //   return res.json();\n    //   }\n    //   )\n    //   .then(\n    //     (result) => {\n    //       console.log('result: '+result.length);\n    //       //checking empty json file. use (/data/empty.json) to test this scenario\n    //       if (result.length === 0) {\n    //         this.setState({\n    //           isLoaded: true,\n    //           isEmpty: true,\n    //         });\n    //       } else if (result.frames.length > 0) {\n    //         this.setState({\n    //           isLoaded: true,\n    //           items: result.frames,\n    //           linkindex: 1,\n    //           item: result.frames[0],\n    //         });\n    //       }\n    //     },\n    //     (error) => {\n    //       console.log(error);\n    //       this.setState({\n    //         isLoaded: true,\n    //         error:'error'\n    //       });\n    //     }\n    //   );\n  \n  render() {\n    const { error, isLoaded, item, isEmpty } = this.state;\n\n    if (error) {\n      console.log(error);\n      //error scenario\n      return <div> Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      console.log('isLoaded');\n      //dislay intil content loaded\n      return (\n        <div className={styles.loadingFrame}>\n          <div className={styles.loading}>LOADING</div>\n        </div>\n      );\n    } else if (isEmpty) {\n      console.log('is empty');\n      //if Ajax call return empty json.\n      return (\n        <div className={styles.loadingFrame}>\n          <div className={styles.loading}>No Content</div>\n        </div>\n      );\n    } else {\n      // happy path\n      //console.log('item: '+item);\n      const styleMain = {\n        backgroundColor: item.colors.bg,\n        textColors: item.colors.text,\n      };\n     // console.log(\"item: \" + item);\n      return (\n        <div style={styleMain}>\n          {/* View port component which has static elements of code */}\n          <Viewport\n            title={item.title}\n            linkindex={this.state.linkindex}\n            text={this.state.item.title}\n            body={this.state.item.body}\n            img={this.state.item.img !== undefined ? this.state.item.img : \"\"}\n            styleMain={styleMain}\n            buttonLeft={this.state.item.buttons.length > 1}\n            buttonRight={this.state.item.buttons.length >= 1}\n            buttonRightTitle={\n              this.state.item.buttons.length >= 1\n                ? this.state.item.buttons[0].text\n                : \"\"\n            }\n            buttonRightIndx={\n              this.state.item.buttons.length >= 1\n                ? this.state.item.buttons[0].linkindex\n                : \"\"\n            }\n            buttonLeftTitle={\n              this.state.item.buttons.length > 1\n                ? this.state.item.buttons[1].text\n                : \"\"\n            }\n            buttonLeftIndx={\n              this.state.item.buttons.length > 1\n                ? this.state.item.buttons[1].linkindex\n                : \"\"\n            }\n            buttonOnclick={this.buttonOnclickHandler}\n            isImage={this.state.item.img !== undefined}\n          />\n        </div>\n      );\n    }\n  }\n}\n\nexport default StoryBuilder;\n","import React from \"react\";\nimport \"./App.css\";\nimport StoryBuilder from \"./container/Storybuilder\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <StoryBuilder />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}